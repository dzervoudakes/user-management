name: Build and Test

on: [push]

jobs:

  ##############
  ### CLIENT ###
  ##############

  client_dependencies:
    runs-on: ubuntu-latest
    name: Install Client Dependencies
    steps:
    - uses: actions/checkout@v2
    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: client-dependency-cache
      with:
        path: client/node_modules
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    - name: Install dependencies
      run: |
        cd client
        npm install

  client_eslint:
    runs-on: ubuntu-latest
    name: Lint Client Scripts
    needs: [client_dependencies]
    steps:
    - uses: actions/checkout@v2
    - name: Restore npm cache
      uses: actions/cache@v2
      env:
        cache-name: client-dependency-cache
      with:
        path: client/node_modules
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    - name: Lint all scripts
      run: |
        cd client
        npm run lint

  client_stylelint:
    runs-on: ubuntu-latest
    name: Lint Client Styles
    needs: [client_dependencies]
    steps:
    - uses: actions/checkout@v2
    - name: Restore npm cache
      uses: actions/cache@v2
      env:
        cache-name: client-dependency-cache
      with:
        path: client/node_modules
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    - name: Lint all styles
      run: |
        cd client
        npm run stylelint

  client_test:
    runs-on: ubuntu-latest
    name: Unit Test Client
    needs: [client_dependencies]
    steps:
    - uses: actions/checkout@v2
    - name: Restore npm cache
      uses: actions/cache@v2
      env:
        cache-name: client-dependency-cache
      with:
        path: client/node_modules
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    - name: Run unit tests
      run: |
        cd client
        npm run test:coverage
    - name: Upload test coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: client/coverage/lcov.info

  client_documentation:
    runs-on: ubuntu-latest
    name: Generate Client Documentation
    needs: [client_dependencies]
    steps:
    - uses: actions/checkout@v2
    - name: Restore npm cache
      uses: actions/cache@v2
      env:
        cache-name: client-dependency-cache
      with:
        path: client/node_modules
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    - name: Generate documentation
      run: |
        cd client
        npm run docs

  client_build:
    runs-on: ubuntu-latest
    name: Bundle Client
    needs: [client_eslint, client_stylelint, client_test, client_documentation]
    steps:
    - uses: actions/checkout@v2
    - name: Restore npm cache
      uses: actions/cache@v2
      env:
        cache-name: client-dependency-cache
      with:
        path: client/node_modules
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    - name: Bundle app
      env:
        API_BASE_URL: ${{ secrets.API_BASE_URL }}
        AUTH_USERNAME: ${{ secrets.AUTH_USERNAME }}
        AUTH_PASSWORD: ${{ secrets.AUTH_PASSWORD }}
      run: |
        cd client
        npm run build

  ##############
  ### SERVER ###
  ##############

  server_dependencies:
    runs-on: ubuntu-latest
    name: Install Server Dependencies
    steps:
    - uses: actions/checkout@v2
    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: server-dependency-cache
      with:
        path: server/node_modules
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    - name: Install dependencies
      run: |
        cd server
        npm install

  server_eslint:
    runs-on: ubuntu-latest
    name: Lint Server Scripts
    needs: [server_dependencies]
    steps:
    - uses: actions/checkout@v2
    - name: Restore npm cache
      uses: actions/cache@v2
      env:
        cache-name: server-dependency-cache
      with:
        path: server/node_modules
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    - name: Lint all scripts
      run: |
        cd server
        npm run lint

  server_test:
    runs-on: ubuntu-latest
    name: Unit Test Server
    needs: [server_dependencies]
    steps:
    - uses: actions/checkout@v2
    - name: Restore npm cache
      uses: actions/cache@v2
      env:
        cache-name: server-dependency-cache
      with:
        path: server/node_modules
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    - name: Run unit tests
      run: |
        cd server
        npm run test:coverage
    - name: Upload test coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: server/coverage/lcov.info

  server_documentation:
    runs-on: ubuntu-latest
    name: Generate Server Documentation
    needs: [server_dependencies]
    steps:
    - uses: actions/checkout@v2
    - name: Restore npm cache
      uses: actions/cache@v2
      env:
        cache-name: server-dependency-cache
      with:
        path: server/node_modules
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    - name: Generate documentation
      run: |
        cd server
        npm run docs

  server_build:
    runs-on: ubuntu-latest
    name: Bundle Server
    needs: [server_eslint, server_test, server_documentation]
    steps:
    - uses: actions/checkout@v2
    - name: Restore npm cache
      uses: actions/cache@v2
      env:
        cache-name: server-dependency-cache
      with:
        path: server/node_modules
        key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
    - name: Bundle app
      env:
        CLIENT_ORIGIN: ${{ secrets.CLIENT_ORIGIN }}
        DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
        OVERNIGHT_JWT_SECRET: ${{ secrets.OVERNIGHT_JWT_SECRET }}
        OVERNIGHT_JWT_EXP: ${{ secrets.OVERNIGHT_JWT_EXP }}
      run: |
        cd server
        npm run build
